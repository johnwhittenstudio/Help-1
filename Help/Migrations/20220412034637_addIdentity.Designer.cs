// <auto-generated />
using System;
using Help.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Help.Migrations
{
    [DbContext(typeof(HelpContext))]
    [Migration("20220412034637_addIdentity")]
    partial class addIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Help.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Help.Models.CityCuisinePriceRestaurant", b =>
                {
                    b.Property<int>("CityCuisinePriceRestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CuisineId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("CityCuisinePriceRestaurantId");

                    b.HasIndex("CityId");

                    b.HasIndex("CuisineId");

                    b.HasIndex("PriceId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("CityCuisinePriceRestaurants");
                });

            modelBuilder.Entity("Help.Models.Cuisine", b =>
                {
                    b.Property<int>("CuisineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CuisineId");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("Help.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DollarSigns")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PriceId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Help.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Help.Models.RestaurantReview", b =>
                {
                    b.Property<int>("RestaurantReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantReviewId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("ReviewId");

                    b.ToTable("RestaurantReviews");
                });

            modelBuilder.Entity("Help.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Headline")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rating")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ReviewId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Help.Models.CityCuisinePriceRestaurant", b =>
                {
                    b.HasOne("Help.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId");

                    b.HasOne("Help.Models.Cuisine", "Cuisine")
                        .WithMany("Restaurants")
                        .HasForeignKey("CuisineId");

                    b.HasOne("Help.Models.Price", "Price")
                        .WithMany("Restaurants")
                        .HasForeignKey("PriceId");

                    b.HasOne("Help.Models.Restaurant", "Restaurant")
                        .WithMany("JoinEntries")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Cuisine");

                    b.Navigation("Price");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Help.Models.RestaurantReview", b =>
                {
                    b.HasOne("Help.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Help.Models.Review", "Review")
                        .WithMany("JoinEntries")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Help.Models.City", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Help.Models.Cuisine", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Help.Models.Price", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Help.Models.Restaurant", b =>
                {
                    b.Navigation("JoinEntries");
                });

            modelBuilder.Entity("Help.Models.Review", b =>
                {
                    b.Navigation("JoinEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
